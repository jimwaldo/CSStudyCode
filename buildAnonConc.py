#!/usr/bin/env python
"""
De-identify a .csv file that contains information about the concentrations of Harvard students
"""
__author__ = 'waldo'

import sys, csv, pickle, random


class student_conc:
    """
    An object that holds the information about a student and his or her concentration, including
    secondary. The object is initialized by a list read from a .csv file, and contains methods
    that will generate a unique (to the student) anonymous id and another that will return a list
    that can be written to a .csv file.
    """
    def __init__(self, init_l):
        """
        Initialize the object, using a list obtained from a .csv file
        :param init_l: List of student properties obtained from a .csv file
        :return: None
        """
        self.id = init_l[0]
        self.primary_conc = init_l[3]
        self.joint_conc = init_l[4]
        self.first_regn = init_l[5]
        self.anon_id = ''

    def get_anon_id(self, id_dict, id_set):
        """
        Generate a de-identified id for the student, which is stored in the anon_id field

        If this student already has a de-identified id, that id will be used; otherwise a new id will
        be generated. The id_set contains all of the de-identified ids that have been generated,
        insuring that no such id is re-used. The id_dict is a mapping from HUID to de-identified id,
        used when a student is seen more than once in the file.
        :param id_dict: a dictionary mapping HUIDs to de-identified ids
        :param id_set: a set of already used de-identified ids
        :return: None
        """
        if self.id in id_dict:
            self.anon_id = id_dict[self.id]
        else:
            self.anon_id = random.randint(1, 1000000)
            while self.anon_id in id_set:
                self.anon_id = random.randint(1, 1000000)
            id_dict[self.id] = self.anon_id
            id_set.add(self.anon_id)

        return None

    def print_list(self):
        """
        Generate a list that can be written to a .csv file of the de-identified student record
        :return: a list of anon_id, concentration, joint concentration, and the date of first registering
        """
        p_list = [self.anon_id,
                  self.primary_conc,
                  self.joint_conc,
                  self.first_regn
                  ]
        return p_list

def main(in_fname, out_fname):
    """
    Driver routine for the script.

    This routine takes the name of the file containing concentration information and the name
    of the file to which de-identified concentration information will be written. It opens the
    files, creates csv readers and writers, and reads a dictionary of mapping from HUIDs to
    de-identified ids (generated by buildAnonList.py) to insure that the same de-identified ids
    are assigned to the same HUIDs
    :param in_fname: Name of the .csv file containing concentration information to be de-identified
    :param out_fname: name of the .csv file to be generated with the de-ideintified concentration information
    :return: None
    """
    fin = open(in_fname, 'rU')
    cin = csv.reader(fin)
    fout = open(out_fname, 'w')
    cout = csv.writer(fout)

    p_in = open('idDictPickle', 'rU')
    id_dict = pickle.load(p_in)
    id_set = set(id_dict.values())
    p_in.close()

    in_head = cin.next()
    in_head.pop(2)
    in_head.pop(1)
    cout.writerow(in_head)

    for l in cin:
        srec = student_conc(l)
        srec.get_anon_id(id_dict, id_set)
        cout.writerow(srec.print_list())

    fin.close()
    fout.close()
    return None

if __name__ == '__main__':
    data_in = sys.argv[1]
    data_out = sys.argv[2]
    main(data_in, data_out)
